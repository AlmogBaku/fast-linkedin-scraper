# .github/workflows/release.yml
name: Auto Release

on:
  push:
    branches: [main, master]
    paths: ['pyproject.toml']  # Only trigger when pyproject.toml changes

jobs:
  check-version-bump:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      new-version: ${{ steps.check.outputs.new-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need to compare with previous commit

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Check if version was bumped
        id: check
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          # Get previous version from git (before this commit)
          git checkout HEAD~1 -- pyproject.toml || true
          PREVIOUS_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2) 2>/dev/null || echo "0.0.0"
          git checkout HEAD -- pyproject.toml
          echo "Previous version: $PREVIOUS_VERSION"

          # Check if version actually changed
          if [[ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]]; then
            echo "✅ Version bump detected: $PREVIOUS_VERSION → $CURRENT_VERSION"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No version change detected"
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-version-bump
    if: needs.check-version-bump.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.check-version-bump.outputs.new-version }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync
          uv sync --dev

      - name: Build package
        run: |
          uv build

      - name: Create release tag
        run: |
          set -e
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "⚠️ Tag v$VERSION already exists, skipping tag creation"
          else
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "✅ Created and pushed tag v$VERSION"
          fi

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          files: |
            dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
          name: "LinkedIn Scraper Playwright v${{ env.VERSION }}"

      - name: Optimize uv cache for CI
        run: uv cache prune --ci

      - name: Summary
        run: |
          echo "Successfully released v$VERSION!"
          echo "GitHub: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
